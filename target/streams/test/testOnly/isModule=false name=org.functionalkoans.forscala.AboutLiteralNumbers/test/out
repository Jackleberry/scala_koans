[0m[[0minfo[0m] [0m[32mAboutLiteralNumbers:[0m[0m
[0m[[0minfo[0m] [0m[32m- Integer Literals are 32-bit and can be created from decimal, hexadecimal[0m[0m
[0m[[0minfo[0m] [0m[32m- Long Literals are 64 bit, are specified by appending an L or l at the end;[0m[0m
[0m[[0minfo[0m] [0m[32m   l is rarely used since it looks like a 1[0m[0m
[0m[[0minfo[0m] [0m[32m  + ***************************************** [0m[0m
[0m[[0minfo[0m] [0m[32m  + ***************************************** [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  + Please meditate on koan "Float and Double Literals are IEEE 754 for specific,[0m[0m
[0m[[0minfo[0m] [0m[32m   Float are 32-bit length, Doubles are 64-bit.[0m[0m
[0m[[0minfo[0m] [0m[32m   Floats can be coerced using a f or F suffix, and[0m[0m
[0m[[0minfo[0m] [0m[32m   Doubles can be coerced using a d or D suffix.[0m[0m
[0m[[0minfo[0m] [0m[32m   Exponent are specified using e or E." of suite "AboutLiteralNumbers" [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  +  [0m[0m
[0m[[0minfo[0m] [0m[32m  + ***************************************** [0m[0m
[0m[[0minfo[0m] [0m[32m  + ***************************************** [0m[0m
